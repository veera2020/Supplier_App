/*
 *  Document    : moderatesupplier.js
 *  Author      : Uyarchi
 *  Description : moderatesupplier for price
 */
import { useState, useEffect, useRef } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { Breadcrumb } from "antd";
import {
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Button,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalFooter,
  ModalBody,
  useDisclosure,
} from "@chakra-ui/react";
import { useFormik } from "formik";
import * as Yup from "yup";
//components
import Forms from "../controls/Forms";
import FormikErrorMessage from "../controls/FormikErrorMessage";
import InputFields from "../controls/InputFields";
import axios from "../../axios";
//useTable
const useTable = () => {
  const [Loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [showLimit, setShowLimit] = useState(10);
  const [gridApi, setGridApi] = useState(null);
  const [rowData, setRowData] = useState(null);
  return {
    currentPage,
    showLimit,
    Loading,
    gridApi,
    rowData,
    setCurrentPage,
    setLoading,
    setShowLimit,
    setGridApi,
    setRowData,
  };
};
const moderatesupplier = () => {
  const { isOpen, onOpen, onClose } = useDisclosure();

  //useState
  const [reload, setreload] = useState("");
  //router
  const router = useRouter();
  //table
  const EmployeeTable = useTable();
  //usestate
  const [id, setId] = useState("");
  const [pricedetails, setpricedetails] = useState("");
  //get all suppliers
  const fetchdata = async (page = 1) => {
    EmployeeTable.setLoading(true);
    const response = await axios.get("/v1/supplierBuyer/allData");
    if (response.status === 200 && response.data) {
      EmployeeTable.setRowData(response.data);
      setpricedetails(response.data.price);
      setreload(!reload);
    } else {
      EmployeeTable.setRowData([]);
    }
  };
  //useEffect
  useEffect(() => {
    // fetchdata(EmployeeTable.currentPage, EmployeeTable.showLimit);
  }, [reload, EmployeeTable.currentPage, EmployeeTable.showLimit]);

  //Formik InitialValue
  const initialvalue = {
    price: pricedetails,
  };
  //formik validation
  const formik = useFormik({
    enableReinitialize: true,
    initialValues: initialvalue,
    validationSchema: Yup.object().shape({
      price: Yup.number().required("Enter Price"),
    }),
    onSubmit: (values) => {
      console.log(values, "hema");
      const data = {
        price: values.price,
      };
      //   axios
      //     .put("/v1/supplierBuyer", data)
      //     .then((res) => {
      //       setreload(!reload);
      //       onClose();
      //       formik.resetForm();
      //     })
      //     .catch((error) => {
      //       if (error.response) {
      //         seterrorMessage(error.response.data.message);
      //       }
      //     });
    },
  });
  const cancelbutton = () => {
    onClose();
    formik.resetForm();
  };
  return (
    <>
      <Head>
        <title>Supplier/Buyer App - Moderate Supplier</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="p-4 ">
        <div className="w-full pb-4">
          <Breadcrumb separator=">">
            <Breadcrumb.Item href="/home">Home</Breadcrumb.Item>
            <Breadcrumb.Item>Moderate Supplier</Breadcrumb.Item>
          </Breadcrumb>
        </div>
        <hr className="p-1"></hr>
        <div className="flex items-center pb-4">
          <span className="flex-auto text-sky-500 text-xl">
            Moderate Supplier
          </span>
          <div className="flex items-center gap-3">
            <Button colorScheme="blue" onClick={() => router.back()}>
              Back
            </Button>
            <Button colorScheme="blue" onClick={() => router.reload()}>
              Refresh
            </Button>
          </div>
        </div>
        <div className="border-gray-500 scroll-smooth border">
          <Table
            size="sm"
            scaleY="44"
            variant="striped"
            colorScheme="whatsapp"
            className="overflow-auto"
          >
            <Thead className="bg-headergreen">
              <Tr>
                <Th>S.No</Th>
                <Th>Name</Th>
                <Th>Product Name</Th>
                <Th>Quantity</Th>
                <Th>Price</Th>
                <Th>Date</Th>
              </Tr>
            </Thead>
            <Tbody>
              {EmployeeTable.rowData != "" ? null : (
                <Tr className="flex justify-center text-center px-2 ">
                  No Data Found
                </Tr>
              )}
              {EmployeeTable.rowData &&
                EmployeeTable.rowData.map((item, index) => (
                  <Tr key={index}>
                    <Td>{index + 1}</Td>
                    {/* <Td>{item}</Td>
                    <Td>{item}</Td>
                    <Td>{item}</Td> */}
                    <Td>
                      <Button onClick={onOpen} variant="link">
                        {item.price}
                      </Button>
                    </Td>
                    {/* <Td>{item}</Td> */}
                  </Tr>
                ))}
            </Tbody>
          </Table>
        </div>
        <Modal isOpen={isOpen} size="xl" onClose={onClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>Moderate Price</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <Forms className="space-y-2">
                <div className="flex flex-col gap-2">
                  <label className="font-semibold">
                    Price
                    <span className="text-secondary pb-2">*</span>
                  </label>
                  <InputFields
                    type="number"
                    name="price"
                    value={formik.values.price}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    className={
                      formik.touched.price && formik.errors.price
                        ? "input-primary ring-2 ring-secondary border-none"
                        : "input-primary"
                    }
                  />
                </div>
                {formik.touched.price && formik.errors.price ? (
                  <FormikErrorMessage>{formik.errors.price}</FormikErrorMessage>
                ) : null}
              </Forms>
            </ModalBody>
            <ModalFooter>
              <Button colorScheme="blue" mr={3} onClick={cancelbutton}>
                Cancel
              </Button>
              <Button onClick={formik.handleSubmit} colorScheme="blue">
                Update
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </div>
    </>
  );
};
export default moderatesupplier;
