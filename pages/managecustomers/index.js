/*
 *  Document    : Supplier.js
 *  Author      : uyarchi
 *  Description : Manage Supplier and Buyer
 */
import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { Breadcrumb } from "antd";
import {
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Button,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  HStack,
  RadioGroup,
  Radio,
  Input,
  Textarea,
  useDisclosure,
} from "@chakra-ui/react";
import { GoogleMap, LoadScript, Marker } from "@react-google-maps/api";
//components
import axios from "../../axios";
//useTable
const useTable = () => {
  const [Loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [showLimit, setShowLimit] = useState(10);
  const [gridApi, setGridApi] = useState(null);
  const [rowData, setRowData] = useState(null);
  return {
    currentPage,
    showLimit,
    Loading,
    gridApi,
    rowData,
    setCurrentPage,
    setLoading,
    setShowLimit,
    setGridApi,
    setRowData,
  };
};
// Status
const Status = [
  { value: "pending", label: "Pending" },
  { value: "moderated", label: "Moderated" },
  { value: "rejected", label: "Rejected" },
];
const CallStatus = [
  { value: "Accepted", label: "Accepted" },
  { value: "CallBack", label: "CallBack" },
];

//function init
const Supplier = () => {
  //router
  const router = useRouter();
  //usestate
  const [name, setName] = useState("null");
  const [status, setStatus] = useState("null");
  const [statusfb, setStatusFB] = useState("null");
  const [callbackreason, setCallBackReason] = useState("null");
  const [reload, setreload] = useState(false);
  const [lat, setlat] = useState("");
  const [lng, setlng] = useState("");

  //table
  const EmployeeTable = useTable();
  //get employees
  const [id, setId] = useState("");
  const fetchdata = async (page = 1) => {
    EmployeeTable.setLoading(true);
    const response = await axios.get("/v1/postorder");
    if (response.status === 200 && response.data) {
      EmployeeTable.setRowData(response.data);
    } else {
      EmployeeTable.setRowData([]);
    }
  };
  //useEffect
  useEffect(() => {
    fetchdata(EmployeeTable.currentPage, EmployeeTable.showLimit);
  }, [reload, EmployeeTable.currentPage, EmployeeTable.showLimit]);
  //modal for map
  const { isOpen, onOpen, onClose } = useDisclosure();
  //mapview
  const isOpenmap = (props) => {
    onOpen();
    // setlat(props.mlatitude);
    // setlng(props.mlongitude);
    setlat(13.033643);
    setlng(80.250518);
  };
  const mapStyles = {
    height: "100%",
    width: "100%",
  };
  //modal for order details
  //usestate
  const [isStatusCall, setIsStatusCall] = useState(false);
  //const [shop, setshop] = useState("");
  const isStatusCallClose = () => {
    setIsStatusCall(false);
  };
  const statusCall = () => {
    setIsStatusCall(true);
    //axios.get(`/v1/supplierBuyer/${props}`).then((res) => setshop(res.data));
  };
  //usestate
  const [isUserDetails, setIsUserDetails] = useState(false);
  const [details, setDetails] = useState("");
  const isUserDetailsClose = () => {
    setIsUserDetails(false);
  };
  const userDetail = (props) => {
    setIsUserDetails(true);
    axios.get(`/v1/postorder/${props}`).then((res) => setDetails(res.data));
  };

  return (
    <>
      <Head>
        <title>Supplier/Buyer App - Manage Customers</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="p-4 ">
        <div className="w-full pb-4">
          <Breadcrumb separator=">">
            <Breadcrumb.Item href="/home">Home</Breadcrumb.Item>
            <Breadcrumb.Item>Manege Customers</Breadcrumb.Item>
          </Breadcrumb>
        </div>
        <hr className="p-1"></hr>
        <div className="flex items-center pb-4">
          <span className="flex-auto text-sky-500 text-xl">
            Manage Customers
          </span>
          <div className="flex items-center gap-3">
            <Button colorScheme="blue" onClick={() => router.back()}>
              Back
            </Button>
            <Button colorScheme="blue" onClick={() => router.reload()}>
              Refresh
            </Button>
          </div>
        </div>
        {/* <hr className="p-1"></hr>
        <div className="flex items-center gap-3 pb-4">
          <div className="flex-auto font-semibold text-primary"></div>
          <div className="flex items-center gap-2">
            <label className="font-semibold">Search By :</label>
            <select
              placeholder="Select"
              style={{ outline: 0 }}
              className="border border-graycolor w-36 focus-outline-none bg-whitecolor experience"
              // onChange={(e) => {
              //   setUserId(e.target.value);
              //   e.target.classList.add("change_color");
              //   getpzone(e.target.value);
              // }}
            >
              <option value="null">Select Date</option>
              {Status &&
                Status.map((item, index) => (
                  <option key={index} value={item.value}>
                    {item.label}
                  </option>
                ))}
            </select>
            <select
              onChange={(e) => {
                setStatus(e.target.value);
                e.target.classList.add("change_color");
              }}
              style={{ outline: 0 }}
              className="border border-graycolor w-36 focus-outline-none bg-whitecolor experience"
              required
            >
              <option value="null">Select Status</option>
              {Status &&
                Status.map((item, index) => (
                  <option key={index} value={item.value}>
                    {item.label}
                  </option>
                ))}
            </select>
          </div>
          <div className="flex text-center pr-2 gap-2">
            <Button colorScheme="blue" onClick={handlesearch}>
              Go
            </Button>
          </div>
        </div> */}
        <div className="border-gray-500 scroll-smooth border">
          <Table
            size="sm"
            scaleY="44"
            variant="striped"
            colorScheme="whatsapp"
            className="overflow-auto"
          >
            <Thead className="bg-headergreen">
              <Tr>
                <Th>S.No</Th>
                <Th>Date</Th>
                <Th>Type</Th>
                <Th>name</Th>
                <Th>Product</Th>
                <Th>map View</Th>
                <Th>Status</Th>
                <Th>Action</Th>
              </Tr>
            </Thead>
            <Tbody>
              {/* <Tr>
                <Td>01</Td>
                <Td>14-06-2022</Td>
                <Td>Supplier</Td>
                <Td>Crazy</Td>
                <Td>Tomato</Td>
                <Td>100</Td>
                <Td>Nill</Td>
                <Td>Pending</Td>
                <Td>
                  <ButtonGroup spacing="1">
                    <Button
                      size="xs"
                      colorScheme="blue"
                      onClick={() => {statusModerate();setName("sup");}}
                    >
                      Moderated
                    </Button>
                    <Button
                      size="xs"
                      colorScheme="red"
                      onClick={() => statusRejected()}
                      // onClick={() => {
                      //   setIsRejectOpen(true);
                      //   setRejectedId(item._id);
                      // }}
                    >
                      Rejected
                    </Button>
                  </ButtonGroup>
                </Td>
              </Tr> */}
              {EmployeeTable.rowData != "" ? null : (
                <Tr className="flex justify-center text-center px-2 ">
                  No Data Found
                </Tr>
              )}
              {EmployeeTable.rowData &&
                EmployeeTable.rowData.map((item, index) => (
                  <Tr colspan="2" key={index}>
                    <Td>{index + 1}</Td>
                    <Td>{item.date}</Td>
                    <Td>{item.type}</Td>
                    <Td>
                      <Button
                        size="md"
                        colorScheme="blue"
                        variant="link"
                        onClick={() => {
                          userDetail(item.id);
                          //setName("sup");
                        }}
                      >
                        {item.name}
                      </Button>
                    </Td>
                    <Td>{item.supplierpname || item.buyerpname}</Td>
                    <Td>
                      <Button
                        size="sm"
                        colorScheme="blue"
                        variant="link"
                        onClick={() => isOpenmap(item)}
                      >
                        MapView
                      </Button>
                    </Td>
                    <Td>
                      {item.status ? (
                        <>
                          <Td>{item.status}</Td>
                          <Td>{item.feedback}</Td>
                        </>
                      ) : (
                        <>nill</>
                      )}
                    </Td>
                    <Td>
                      <Button
                        size="md"
                        colorScheme="blue"
                        variant="link"
                        onClick={() => {
                          statusCall();
                          //setName("sup");
                        }}
                      >
                        call
                      </Button>
                    </Td>
                  </Tr>
                ))}
            </Tbody>
          </Table>
        </div>
        <Modal isOpen={isStatusCall} onClose={isStatusCallClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>By Telecaller</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <div className="grid items-center gap-2">
                {/* <div className="flex-auto font-semibold text-primary"></div> */}
                <div className="flex gap-2">
                  <label className="font-semibold">Search By :</label>

                  <select
                    onChange={(e) => {
                      setStatus(e.target.value);
                      e.target.classList.add("change_color");
                    }}
                    style={{ outline: 0 }}
                    className="border border-graycolor w-36 focus-outline-none bg-whitecolor experience"
                    required
                  >
                    <option value="null">Select Status</option>
                    {CallStatus &&
                      CallStatus.map((item, index) => (
                        <option key={index} value={item.value}>
                          {item.label}
                        </option>
                      ))}
                  </select>
                </div>
              </div>
              <div className="grid items-center gap-3 pb-4">
                <div className="flex-auto font-semibold text-primary"></div>
                <div className="flex items-center gap-2">
                  {status == "Accepted" ? (
                    <>
                      <RadioGroup defaultValue="null">
                        <HStack
                          spacing="24px"
                          name="Reason"
                          onChange={(e) => {
                            setStatusFB(e.target.value);
                          }}
                        >
                          <div className="grid flex-auto md:w-1/2">
                            <Radio name="Reason" value="Requirement Alive">
                              Requirement Alive.
                            </Radio>
                            <Radio name="Reason" value="Requirement dead">
                              Requirement dead.
                            </Radio>
                            <Radio
                              name="Reason"
                              value="Requirement Alive with modification"
                            >
                              Requirement Alive with modification.
                            </Radio>
                          </div>
                        </HStack>
                      </RadioGroup>
                    </>
                  ) : (
                    ""
                  )}
                  {status == "CallBack" ? (
                    <>
                      <RadioGroup defaultValue="null">
                        <HStack
                          name="callbackReson"
                          onChange={(e) => {
                            // formik.setFieldValue(
                            //   "callbackreason",
                            //   e.target.value
                            // );
                            setCallBackReason(e.target.value);
                          }}
                          spacing="24px"
                        >
                          <div className="grid flex-auto md:w-1/2">
                            <Radio name="callbackReson" value="Second call">
                              Second call
                            </Radio>
                            <Radio name="callbackReson" value="Engaged">
                              Engaged
                            </Radio>
                            <Radio name="callbackReson" value="Not reachable">
                              Not reachable   
                            </Radio>
                            <Radio
                              name="callbackReson"
                              value="Cutting the call"
                            >
                              Cutting the call
                            </Radio>
                            <Radio name="callbackReson" value="Ringing">
                              Ringing
                            </Radio>
                            <Radio
                              name="callbackReson"
                              value="Answer to call later"
                            >
                              Answer to call later
                            </Radio>
                          </div>
                        </HStack>
                      </RadioGroup>
                    </>
                  ) : (
                    ""
                  )}
                </div>
              </div>
              <div className="grid items-center gap-3 pb-4">
                {/* <div className="flex-auto font-semibold text-primary"></div> */}
                <div className="flex items-center gap-2">
                  {callbackreason === "Answer to call later" ? (
                    <>
                      <Input
                        type="datetime-local"
                        name="callbacktime"
                        placeholder="Enter Price"
                        // value={formik.values.callbacktime || ""}
                        // onChange={formik.handleChange}
                        // onBlur={formik.handleBlur}
                        className="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                        // className={
                        //   formik.touched.name && formik.errors.name
                        //     ? "input-primary ring-2 ring-secondary border-none"
                        //     : "input-primary"
                        // }
                      />
                    </>
                  ) : (
                    ""
                  )}
                </div>
              </div>
              <div className="grid items-center gap-3 pb-4">
                {/* <div className="flex-auto font-semibold text-primary"></div> */}
                <div className="items-center gap-2">
                  {statusfb == "Requirement Alive" ? <></> : ""}
                  {statusfb == "Requirement Alive" ? (
                    <>
                      <label className="font-semibold">(No Change Done)</label>
                      <Textarea
                        type="datetime-local"
                        name="feedback"
                        placeholder="Feedback :"
                        // value={formik.values.callbacktime || ""}
                        // onChange={formik.handleChange}
                        // onBlur={formik.handleBlur}
                        className="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                      />
                    </>
                  ) : (
                    ""
                  )}
                  {statusfb == "Requirement dead" ? (
                    <>
                      <label className="font-semibold ">(Reject)</label>
                      <Textarea
                        type="datetime-local"
                        name="feedback"
                        placeholder="Feedback :"
                        // value={formik.values.callbacktime || ""}
                        // onChange={formik.handleChange}
                        // onBlur={formik.handleBlur}
                        className="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                      />
                    </>
                  ) : (
                    ""
                  )}
                  {statusfb == "Requirement Alive" ? <></> : ""}
                </div>
              </div>
            </ModalBody>
            <ModalFooter>
              <Button onClick={isStatusCallClose} colorScheme="blue" mr={3}>
                Save
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
        <Modal isOpen={isUserDetails} onClose={isUserDetailsClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>User Details</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <div className="p-4 ">
                {details.type == "Supplier" ? (
                  <>
                    <div className="border border-graycolor cursor-pointer">
                      <div className="grid grid-cols-6 px-4 p-1">
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Type
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.type}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Name
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.name}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Product Name
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.supplierpname}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock Location
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.stocklocation}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock position
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.stockposition}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Pack Type
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.packtype}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Excepted Quantity
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.expquantity}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Excepted Price
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.expprice}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock Availability
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.stockavailabilitydate}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-graycolor p-1">
                          Payment Mode
                        </div>
                        <div className="col-span-4 p-1">
                          {details.paymentmode}
                        </div>
                      </div>
                    </div>
                  </>
                ) : (
                  ""
                )}
                {details.type == "Buyer" ? (
                  <>
                    <div className="border border-graycolor cursor-pointer">
                      <div className="grid grid-cols-6 px-4 p-1">
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Type
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.type}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Name
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.name}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Product Name
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.buyerpname}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Quality Range
                        </div>
                        <div className="col-span-2 border-b border-r p-1">
                          {details.minrange}
                        </div>
                        <div className="col-span-2 border-b p-1">
                          {details.maxrange}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Landing Price
                        </div>
                        <div className="col-span-2 border-b border-r p-1">
                          {details.minprice}
                        </div>
                        <div className="col-span-2 border-b p-1">
                          {details.maxprice}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock (Product Delivery)
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.pdelivery}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Delivery Location
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.deliverylocation}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-graycolor p-1">
                          Estimate Delivery Date
                        </div>
                        <div className="col-span-4 p-1">{details.date}</div>
                      </div>
                    </div>
                  </>
                ) : (
                  ""
                )}
                {details.type == "Both" ? (
                  <>
                    <div className="border border-graycolor cursor-pointer">
                      <div className="grid grid-cols-6 px-4 p-1">
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Type
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.type}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Name
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.name}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock (Product Delivery)
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.name}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Product Name
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.supplierpname}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock Location
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.stocklocation}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock position
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.stockposition}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Pack Type
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.packtype}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Excepted Quantity
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.expquantity}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Excepted Price
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.expprice}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock Availability
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.stockavailabilitydate}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-graycolor p-1">
                          Payment Mode
                        </div>
                        <div className="col-span-4 p-1">
                          {details.paymentmode}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Quality Range
                        </div>
                        <div className="col-span-2 border-b border-r p-1">
                          {details.minrange}
                        </div>
                        <div className="col-span-2 border-b p-1">
                          {details.maxrange}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Landing Price
                        </div>
                        <div className="col-span-2 border-b border-r p-1">
                          {details.minprice}
                        </div>
                        <div className="col-span-2 border-b p-1">
                          {details.maxprice}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Stock (Product Delivery)
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.pdelivery}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-b border-graycolor p-1">
                          Delivery Location
                        </div>
                        <div className="col-span-4 border-b p-1">
                          {details.deliverylocation}
                        </div>
                        <div className="col-span-2 text-blue-500 text-semibold border-r border-graycolor p-1">
                          Estimate Delivery Date
                        </div>
                        <div className="col-span-4 p-1">{details.date}</div>
                      </div>
                    </div>
                  </>
                ) : (
                  ""
                )}
              </div>
            </ModalBody>
            <ModalFooter>
              <Button onClick={isUserDetailsClose} colorScheme="red" mr={3}>
                Close
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
        <Modal isOpen={isOpen} onClose={onClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>Map View</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <div className="flex justify-center text-center">
                <div className="object-cover h-48 w-96">
                  <LoadScript googleMapsApiKey="AIzaSyDoYhbYhtl9HpilAZSy8F_JHmzvwVDoeHI">
                    <GoogleMap
                      mapContainerStyle={mapStyles}
                      zoom={13}
                      center={{
                        lat: parseFloat(lat),
                        lng: parseFloat(lng),
                      }}
                    >
                      <Marker
                        position={{
                          lat: parseFloat(lat),
                          lng: parseFloat(lng),
                        }}
                      />
                    </GoogleMap>
                  </LoadScript>
                </div>
              </div>
            </ModalBody>
            <ModalFooter>
              <Button onClick={onClose} colorScheme="blue" mr={3}>
                Close
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </div>
    </>
  );
};
export default Supplier;
