/*
 *  Document    : BuyerPostOrder.js
 *  Author      : Uyarchi
 *  Description : post order of Buyer
 */
import React, { useState, useEffect } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import Link from "next/link";
import { Breadcrumb } from "antd";
import {
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Button,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  useDisclosure,
} from "@chakra-ui/react";
import { GoogleMap, LoadScript, Marker } from "@react-google-maps/api";
import Pagination from "../controls/Pagination";
import axios from "../../axios";
import AddRequirement from "./AddRequirement";
//useTable
const useTable = () => {
  const [Loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [showLimit, setShowLimit] = useState(10);
  const [gridApi, setGridApi] = useState(null);
  const [rowData, setRowData] = useState(null);
  return {
    currentPage,
    showLimit,
    Loading,
    gridApi,
    rowData,
    setCurrentPage,
    setLoading,
    setShowLimit,
    setGridApi,
    setRowData,
  };
};
const BuyerPostOrder = () => {
  //router
  const router = useRouter();
  //usestate
  const [reload, setreload] = useState(false);
  const [slat, setslat] = useState("");
  const [slng, setslng] = useState("");
  const [blat, setblat] = useState("");
  const [blng, setblng] = useState("");
  const [total, settotal] = useState("");
  //table
  const EmployeeTable = useTable();
  //get employees
  const fetchdata = async (page = 1) => {
    EmployeeTable.setLoading(true);
    const response = await axios.get("/v1/requirementCollectionBS/Buyer");
    if (response.status === 200 && response.data) {
      EmployeeTable.setRowData(response.data);
      settotal(response.data.count);
    } else {
      EmployeeTable.setRowData([]);
    }
  };
  //useEffect
  useEffect(() => {
    fetchdata(EmployeeTable.currentPage, EmployeeTable.showLimit);
  }, [reload, EmployeeTable.currentPage, EmployeeTable.showLimit]);
  //modal for order details
  //usestate
  const [isshopopen, setIsshopopen] = useState(false);
  const [buyerDetails, setBuyerDetails] = useState("");
  const isshopclose = () => {
    setIsshopopen(false);
  };
  const isopenshop = (props) => {
    setIsshopopen(true);
    axios
      .get(`/v1/requirementCollectionBS/Buyer/${props}`)
      .then((res) => setBuyerDetails(res.data[0]));
    console.log(buyerDetails);
  };
  //modal for map
  const { isOpen, onOpen, onClose } = useDisclosure();
  //usestate
  const [isbopen, setisbopen] = useState(false);
  const onbclose = () => {
    setisbopen(false);
  };
  const isOpenmap = (props) => {
    setisbopen(true);
    setblat(props.lat);
    setblng(props.lang);
  };
  const mapStyles = {
    height: "100%",
    width: "100%",
  };
  //time split
  const Time = (props) => {
    const a = props.data;
    console.log(a);
    const first2Str = String(a).slice(0, 2); // üëâÔ∏è '13'
    const second2Str = String(a).slice(2, 4); // üëâÔ∏è '13'
    const final = first2Str + ":" + second2Str;
    return <>{final}</>;
  };
  return (
    <>
      <Head>
        <title>Supplier/Buyer App - Buyer Manage Requirements</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="p-4 ">
        <div className="w-full pb-4">
          <Breadcrumb separator=">">
            <Breadcrumb.Item href="/home">Home</Breadcrumb.Item>
            <Breadcrumb.Item>Buyer Manage Requirements</Breadcrumb.Item>
          </Breadcrumb>
        </div>
        <hr className="p-1"></hr>
        <div className="flex items-center pb-4">
          <span className="flex-auto text-sky-500 text-xl">
            Buyer Manage Requirements
          </span>
          <div className="flex items-center gap-3">
            <AddRequirement setreload={setreload} reload={reload} />
            <Button colorScheme="blue" onClick={() => router.back()}>
              Back
            </Button>
            <Button colorScheme="blue" onClick={() => router.reload()}>
              Refresh
            </Button>
          </div>
        </div>
        <div className="border-gray-500 scroll-smooth border overflow-y-scroll">
          <Table
            size="sm"
            scaleY="44"
            variant="striped"
            colorScheme="whatsapp"
            className="overflow-auto"
          >
            <Thead className="bg-headergreen">
              <Tr>
                <Th textAlign="center">S.No</Th>
                <Th textAlign="center">Date</Th>
                <Th textAlign="center">Time</Th>
                <Th textAlign="center">Id</Th>
                <Th textAlign="center">Name</Th>
                <Th textAlign="center">Product Name</Th>
                <Th textAlign="center">Map View</Th>
              </Tr>
            </Thead>
            <Tbody>
              {EmployeeTable.rowData != "" ? null : (
                <Tr>
                  <Td
                    style={{ textAlign: "center" }}
                    className="font-semibold"
                    colSpan="7"
                  >
                    No Data Found
                  </Td>
                </Tr>
              )}
              {EmployeeTable.rowData &&
                EmployeeTable.rowData.map((item, index) => (
                  <Tr key={index}>
                    <Td textAlign="center">{index + 1}</Td>
                    <Td textAlign="center">{item.date}</Td>
                    <Td textAlign="center">{<Time data={item.time} />}</Td>
                    <Td textAlign="center">{item.secretName}</Td>
                    <Td textAlign="center">
                      <Button
                        size="sm"
                        colorScheme="blue"
                        variant="link"
                        onClick={() => isopenshop(item._id)}
                      >
                        {item.name}
                      </Button>
                    </Td>
                    <Td textAlign="center">{item.product}</Td>
                    <Td textAlign="center">
                      <Button
                        size="sm"
                        colorScheme="blue"
                        variant="link"
                        onClick={() => isOpenmap(item)}
                      >
                        {item.deliverylocation}
                      </Button>
                    </Td>
                  </Tr>
                ))}
            </Tbody>
          </Table>
        </div>
        <Pagination
          totalRecord={total ? total : 0}
          rowLength={EmployeeTable.rowData ? total : 0}
          {...EmployeeTable}
        />
        <Modal isOpen={isshopopen} onClose={isshopclose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>Orders Details</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <div className="border border-graycolor cursor-pointer">
                <div className="grid grid-cols-5 px-4">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Product Name
                  </div>
                  <div className="col-span-4 p-1">{buyerDetails.product}</div>
                </div>
                <div className="grid grid-cols-5 px-4 border-t border-graycolor">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Quantity Range
                  </div>
                  <div className="col-span-4 p-1">
                    {buyerDetails.minrange} to {buyerDetails.maxrange}
                  </div>
                </div>
                <div className="grid grid-cols-5 px-4 border-t border-graycolor">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Landing Price
                  </div>
                  <div className="col-span-4 p-1">
                    {buyerDetails.minprice} to {buyerDetails.maxprice}
                  </div>
                </div>
                <div className="grid grid-cols-5 px-4 border-t border-graycolor">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Stock (Product Delivery)
                  </div>
                  <div className="col-span-4 p-1">
                    {buyerDetails.deliverylocation}
                  </div>
                </div>
                <div className="grid grid-cols-5 px-4 border-t border-graycolor">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Estimated Delivery Date
                  </div>
                  <div className="col-span-4 p-1">
                    {buyerDetails.deliveryDate}
                  </div>
                </div>
                <div className="grid grid-cols-5 px-4 border-t border-graycolor">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Estimated Delivery Time
                  </div>
                  <div className="col-span-4 p-1">
                    {buyerDetails.deliveryTime}
                  </div>
                </div>
                <div className="grid grid-cols-5 px-4 border-t border-graycolor">
                  <div className="col-span-1 text-blue-500 text-semibold border-r border-graycolor p-1">
                    Requirement Added By
                  </div>
                  <div className="col-span-4 p-1">
                    {buyerDetails.requirementAddBy}
                  </div>
                </div>
              </div>
            </ModalBody>
            <ModalFooter>
              <Button onClick={isshopclose} colorScheme="blue" mr={3}>
                Close
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
        <Modal isOpen={isbopen} onClose={onbclose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>Map View</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <div className="flex justify-center text-center">
                <div className="object-cover h-48 w-96">
                  <LoadScript googleMapsApiKey="AIzaSyDoYhbYhtl9HpilAZSy8F_JHmzvwVDoeHI">
                    <GoogleMap
                      mapContainerStyle={mapStyles}
                      zoom={13}
                      center={{
                        lat: parseFloat(blat),
                        lng: parseFloat(blng),
                      }}
                    >
                      <Marker
                        position={{
                          lat: parseFloat(blat),
                          lng: parseFloat(blng),
                        }}
                      />
                    </GoogleMap>
                  </LoadScript>
                </div>
              </div>
            </ModalBody>
            <ModalFooter>
              <Button onClick={onbclose} colorScheme="blue" mr={3}>
                Close
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </div>
    </>
  );
};
export default BuyerPostOrder;
